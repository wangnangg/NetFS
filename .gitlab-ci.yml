# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script: 
    - apt update && apt -y install make clang pkg-config meson ninja
    - apt-get install libpoco-dev
    - bash prepare.sh
  script: 
    - python3 genmake.py
    - make all config=debug
    - make all config=release
  artifacts:
    paths:
      - build/debug/utest
      - build/debug/client
      - build/debug/server
      - build/release/utest
      - build/release/client
      - build/release/server
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
test:
  stage: test
  script:
    - bash utest.sh config=debug
    - bash utest.sh config=release
